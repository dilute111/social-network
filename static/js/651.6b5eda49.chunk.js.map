{"version":3,"file":"static/js/651.6b5eda49.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/ProfilePage/ProfileInfo/ProfileInfo.module.css?3767","components/ProfilePage/ProfileStatus/ProfileStatusWithHooks.jsx","webpack://my-app/./src/components/ProfilePage/ProfileInfo/ProfileDataForm.module.css?e3dc","components/ProfilePage/ProfileInfo/ProfileDataForm.jsx","components/ProfilePage/ProfileInfo/ProfileInfo.jsx","webpack://my-app/./src/components/ProfilePage/MyPosts/MyPosts.module.css?e958","webpack://my-app/./src/components/ProfilePage/MyPosts/Post.module.css?9c71","components/ProfilePage/MyPosts/Post.jsx","components/ProfilePage/MyPosts/MyPosts.jsx","components/ProfilePage/MyPosts/MyPostsContainer.jsx","components/ProfilePage/ProfilePage.jsx","components/ProfilePage/ProfilePageContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__AnwTh\",\"coverImg\":\"ProfileInfo_coverImg__o5WzT\",\"profileStatus\":\"ProfileInfo_profileStatus__Gsp+H\",\"userDescription\":\"ProfileInfo_userDescription__cR5D7\",\"bio\":\"ProfileInfo_bio__H8Kfk\",\"expanded\":\"ProfileInfo_expanded__cpOH-\",\"toggleArrow\":\"ProfileInfo_toggleArrow__rN9PF\",\"contact\":\"ProfileInfo_contact__ZC2Hm\",\"editButton\":\"ProfileInfo_editButton__VOUcS\",\"skills\":\"ProfileInfo_skills__A8uqW\"};","import React, {useEffect, useState} from 'react';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        if (props.status !== status) {\r\n            setStatus(props.status);\r\n        }\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <b>\r\n            {!editMode ? (\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || \"------\"}</span>\r\n                </div>) : (\r\n                <div>\r\n                    <input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus={true}\r\n                           value={status}/>\r\n                </div>)}\r\n        </b>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","// extracted by mini-css-extract-plugin\nexport default {\"bio\":\"ProfileDataForm_bio__u8CcD\",\"formGroup\":\"ProfileDataForm_formGroup__TAJrp\",\"skills\":\"ProfileDataForm_skills__uFwyG\",\"saveButton\":\"ProfileDataForm_saveButton__mD2KO\",\"userName\":\"ProfileDataForm_userName__NF3f3\",\"contact\":\"ProfileDataForm_contact__dwa5V\",\"header\":\"ProfileDataForm_header__SRBcX\",\"error\":\"ProfileDataForm_error__9MMx4\",\"userContacts\":\"ProfileDataForm_userContacts__nKlou\"};","import React, {useState} from \"react\";\r\nimport classes from \"./ProfileDataForm.module.css\";\r\nimport {FormControl} from \"../../common/FormsControls/FormsControls\";\r\nimport {useForm} from \"react-hook-form\";\r\n\r\nconst ProfileDataForm = ({profile, onSubmit, setEditMode, errorMessage}) => {\r\n    const [expanded, setExpanded] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: {errors, touchedFields},\r\n    } = useForm({\r\n        defaultValues: {\r\n            fullName: profile.fullName,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            aboutMe: profile.aboutMe,\r\n            contacts: profile.contacts || {},\r\n        },\r\n    });\r\n\r\n    const handleHeaderClick = () => {\r\n        setExpanded(!expanded);\r\n        if (expanded) {\r\n            setEditMode(false); // Устанавливаем editMode в false при сворачивании формы\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit((data) => onSubmit(data, setError))}>\r\n            <div\r\n                className={classes.bio}>\r\n                <div className={classes.header} onClick={handleHeaderClick}>\r\n                    Main user info\r\n                    <span>▲</span>\r\n                </div>\r\n                {expanded && ( // Показываем содержимое формы, только если expanded === true\r\n                    <>\r\n                        <div className={classes.formGroup}>\r\n                            <b className={classes.userName}>Name: </b>\r\n                            <FormControl Component=\"input\" name=\"fullName\" register={register} errors={errors}\r\n                                         touchedFields={touchedFields}/>\r\n                        </div>\r\n                        <div className={classes.formGroup}>\r\n                            <b>Looking for a job: </b>\r\n                            <input type=\"checkbox\" {...register(\"lookingForAJob\")} />\r\n                        </div>\r\n                        <div className={classes.formGroup}>\r\n                            <b>My professional skills: </b>\r\n                            <div className={classes.skills}>\r\n                                <FormControl Component=\"textarea\" name=\"lookingForAJobDescription\" register={register}\r\n                                             errors={errors} touchedFields={touchedFields}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className={classes.formGroup}>\r\n                            <b>About me: </b>\r\n                            <FormControl Component=\"textarea\" name=\"aboutMe\" register={register} errors={errors}\r\n                                         touchedFields={touchedFields}/>\r\n                        </div>\r\n                        <div className={classes.formGroup}>\r\n                        <div className={classes.userContacts}>\r\n                            <b>Contacts: </b>\r\n                            {Object.keys(profile.contacts).map((key) => {\r\n                                return (\r\n                                    <div key={key} className={classes.contact}>\r\n                                        <b>{key}:</b>\r\n                                        <FormControl Component=\"input\" name={`contacts.${key}`} register={register}\r\n                                                     errors={errors} touchedFields={touchedFields}/>\r\n                                        {typeof errorMessage === 'string' ?\r\n                                        (key.includes(errorMessage.split(/[-()>]/)[3].toLowerCase())) &&\r\n                                            <span className={classes.error}>{errorMessage}</span> : \"\"\r\n                                        }\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <button type=\"submit\" className={classes.saveButton}>Save info</button>\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ProfileDataForm","import React, {useState} from 'react';\r\nimport {beachImg} from \"../../../App\";\r\nimport classes from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../assets/images/user.png\"\r\nimport ProfileStatusWithHooks from \"../ProfileStatus/ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nexport const Contact = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={classes.contact}>\r\n            <b>{contactTitle}:</b> <span>{contactValue}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, activateEditMode, expanded, setExpanded}) => {\r\n    return (\r\n        <div>\r\n            <div\r\n                className={`${classes.bio} ${expanded ? classes.expanded : ''}`}\r\n                onClick={() => setExpanded(!expanded)}\r\n            >\r\n                Main user info\r\n                <span className={classes.toggleArrow}>{expanded ? \"▲\" : \"▼\"}</span>\r\n                <div>\r\n                    <b>Name: </b> {profile.fullName}\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job: </b> {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n                </div>\r\n                <div>\r\n                    <b>My professional skills: </b> <div className={classes.skills}>\r\n                    {profile.lookingForAJobDescription || `not filled`} </div>\r\n                </div>\r\n                <div>\r\n                    <b>About me: </b> {profile.aboutMe}\r\n                </div>\r\n                <div>\r\n                    <b>Contacts: </b> {Object.keys(profile.contacts).map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n                })\r\n                }\r\n                </div>\r\n                {isOwner && <div>\r\n                    <button onClick={activateEditMode} className={classes.editButton}>Edit info</button>\r\n                </div>}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [expanded, setExpanded] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>;\r\n    }\r\n\r\n    const activateEditMode = (e) => {\r\n        setEditMode(true)\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const onSubmit = async (formData, setError) => {\r\n        try {\r\n            await saveProfile(formData); // saveProfile возвращает промис из thunk\r\n            setEditMode(false);\r\n            setExpanded(true);\r\n            setErrorMessage(null); // Убираем общее сообщение об ошибке\r\n        } catch (error) {\r\n            if (error.errors && setError) {\r\n                // Структурированные ошибки\r\n                error.errors.forEach(({ field, message }) => {\r\n                    setError(field, { type: \"server\", message });\r\n                });\r\n            } else if (error.message && setError) {\r\n                // Парсим общую ошибку вида \"Invalid url format (Contacts -> facebook)\"\r\n                const match = error.message.match(/Invalid url format \\(Contacts -> (\\w+)\\)/);\r\n                if (match) {\r\n                    const fieldName = match[1].toLowerCase();\r\n                    setError(`contacts.${fieldName}`, {\r\n                        type: \"server\",\r\n                        message: \"Invalid URL format\",\r\n                    });\r\n                } else {\r\n                    // Если ошибка не связана с конкретным полем, можно оставить общее сообщение\r\n                    setErrorMessage(error.message);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            const file = e.target.files[0]\r\n            savePhoto(file)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <img className={classes.coverImg} src={beachImg} alt=\"logo\"/>\r\n            </div>\r\n            <div className={classes.descriptionBlock}>\r\n                {profile && profile.photos ? (\r\n                    <div className={classes.userDescription}>\r\n                        <img src={profile.photos.large || userPhoto} alt=\"\"/>\r\n                        {isOwner ? <input type=\"file\" onChange={onMainPhotoSelected}/> : \"\"}\r\n\r\n                        {editMode ? <ProfileDataForm profile={profile}\r\n                                                     onSubmit={onSubmit}\r\n                                                     setExpanded={setExpanded}\r\n                                                     setEditMode={setEditMode}\r\n                                                     errorMessage={errorMessage}\r\n                            /> :\r\n                            <ProfileData activateEditMode={activateEditMode} profile={profile} isOwner={isOwner}\r\n                                         expanded={expanded} // Передаём expanded\r\n                                         setExpanded={setExpanded} // Передаём setExpanded\r\n                            />}\r\n                    </div>\r\n\r\n                ) : (\r\n                    <Preloader/>\r\n                )}\r\n                <div className={classes.profileStatus}>\r\n                    Status <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ProfileInfo","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MyPosts_item__220WX\",\"textBlock\":\"MyPosts_textBlock__LMlMR\",\"posts\":\"MyPosts_posts__qFwQp\",\"error\":\"MyPosts_error__4HT5D\",\"errorMessage\":\"MyPosts_errorMessage__ADAmv\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Post_content__xUVaM\",\"item\":\"Post_item__xe6sQ\"};","import React from 'react';\r\nimport classes from \"./Post.module.css\";\r\n\r\nconst Post = (props) => {\r\n    return (\r\n\r\n            <div className={classes.item}>\r\n                <div className={classes.content}>\r\n                    <img  src={props.image} alt=\"\" />\r\n                    <span> { props.message } </span>\r\n                    <div>\r\n                    <span> Like { props.likes } </span>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post\";\r\nimport {avatar} from \"../../../App\";\r\nimport {MyPostsStock} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\nconst MyPostsForm = (props) => {\r\n\r\n    return (\r\n        <MyPostsStock onAddPost={props.onAddPost} />\r\n    )\r\n}\r\n\r\nconst MyPosts = React.memo((props) => {\r\n\r\n    const postsData =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(e => <Post image={avatar} message={e.message} likes={e.likesCount}/>)\r\n\r\n    const onAddPost = (text) => {\r\n        props.updateNewPostText(text); // Обновляем текст\r\n        props.addPost(text); // Отправляем пост\r\n    };\r\n\r\n    return (\r\n        <div className={classes.item}>\r\n            <h3>My posts</h3>\r\n            <MyPostsForm onAddPost={onAddPost}/>\r\n            <div className={classes.posts}>{postsData}</div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default MyPosts;","import {addPostActionCreator, updateNewPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText,\r\n        users: state.usersPage.users,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateNewPostText: (text) => {\r\n            let action = updateNewPostActionCreator(text)\r\n            dispatch(action)\r\n        },\r\n        addPost: (text) => {\r\n            dispatch(addPostActionCreator(text))\r\n        },\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\n\r\nconst ProfilePage = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         isOwner={props.isOwner}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer  />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfilePage","import React from 'react';\r\nimport ProfilePage from \"./ProfilePage\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {useNavigate, useParams, useLocation, Navigate} from 'react-router-dom';\r\nimport withAuthRedirect from \"../../hoc/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nfunction withRouter(Component) {\r\n    return (props) => {\r\n        const navigate = useNavigate();\r\n        const params = useParams();\r\n        const location = useLocation();\r\n\r\n        return (\r\n            <Component\r\n                {...props}\r\n                navigate={navigate}\r\n                params={params}\r\n                location={location}\r\n            />\r\n        );\r\n    };\r\n}\r\n\r\n\r\nclass ProfilePageContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.params.userId || this.props.authorizedUserId\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        let userId = this.props.params.userId || this.props.authorizedUserId\r\n        if (userId !== (prevProps.params.userId || prevProps.authorizedUserId)) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <ProfilePage {...this.props}\r\n                         isOwner={!this.props.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         savePhoto={this.props.savePhoto}\r\n                         saveProfile={this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuthorized: state.auth.isAuthorized,\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfilePageContainer)\r\n"],"names":["props","editMode","setEditMode","useState","status","setStatus","useEffect","_jsx","children","onChange","e","currentTarget","value","onBlur","deactivateEditMode","updateStatus","autoFocus","onDoubleClick","activateEditMode","_ref","profile","onSubmit","errorMessage","expanded","setExpanded","error","setError","register","handleSubmit","formState","errors","touchedFields","useForm","defaultValues","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","data","_jsxs","className","classes","onClick","handleHeaderClick","_Fragment","FormControl","Component","name","type","Object","keys","map","key","includes","split","toLowerCase","Contact","contactTitle","contactValue","ProfileData","_ref2","isOwner","_ref3","savePhoto","saveProfile","setErrorMessage","Preloader","src","beachImg","alt","photos","large","userPhoto","target","files","length","file","ProfileDataForm","async","formData","forEach","_ref4","field","message","match","fieldName","stopPropagation","ProfileStatusWithHooks","image","likes","MyPostsForm","MyPostsStock","onAddPost","React","postsData","posts","reverse","Post","avatar","likesCount","text","updateNewPostText","addPost","connect","state","profilePage","newPostText","users","usersPage","dispatch","action","updateNewPostActionCreator","addPostActionCreator","MyPosts","ProfileInfo","MyPostsContainer","ProfilePageContainer","refreshProfile","userId","this","params","authorizedUserId","getUserProfile","getStatus","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","render","ProfilePage","compose","auth","isAuthorized","navigate","useNavigate","useParams","location","useLocation","withAuthRedirect"],"sourceRoot":""}
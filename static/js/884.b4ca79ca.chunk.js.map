{"version":3,"file":"static/js/884.b4ca79ca.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/ProfilePage/ProfileInfo/ProfileInfo.module.css?3767","components/ProfilePage/ProfileStatus/ProfileStatusWithHooks.tsx","webpack://my-app/./src/components/ProfilePage/ProfileInfo/ProfileDataForm.module.css?e3dc","components/ProfilePage/ProfileInfo/ProfileDataForm.tsx","components/ProfilePage/ProfileInfo/ProfileInfo.tsx","webpack://my-app/./src/components/ProfilePage/MyPosts/MyPosts.module.css?e958","webpack://my-app/./src/components/ProfilePage/MyPosts/Post.module.css?9c71","components/ProfilePage/MyPosts/Post.tsx","components/ProfilePage/MyPosts/MyPosts.tsx","components/ProfilePage/MyPosts/MyPostsContainer.tsx","components/ProfilePage/ProfilePage.tsx","components/ProfilePage/ProfilePageContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__h5PA2\",\"coverImg\":\"ProfileInfo_coverImg__as+7Q\",\"profileStatus\":\"ProfileInfo_profileStatus__x-woA\",\"userDescription\":\"ProfileInfo_userDescription__zhKqd\",\"bio\":\"ProfileInfo_bio__KValO\",\"expanded\":\"ProfileInfo_expanded__p6LeK\",\"toggleArrow\":\"ProfileInfo_toggleArrow__wIooa\",\"contact\":\"ProfileInfo_contact__5kcik\",\"editButton\":\"ProfileInfo_editButton__yAgNm\",\"skills\":\"ProfileInfo_skills__+1zdX\"};","import React, {FC, useEffect, useState} from 'react';\r\nimport {IProfileStatusWithHooksProps} from \"../../../types/types\";\r\n\r\nconst ProfileStatusWithHooks: FC<IProfileStatusWithHooksProps> = ({status, updateStatus}) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [newStatus, setNewStatus] = useState<string>(status)\r\n\r\n    useEffect(() => {\r\n            setNewStatus(status);\r\n    }, [status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateStatus(newStatus)\r\n    }\r\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <b>\r\n            {!editMode ? (\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{status || \"------\"}</span>\r\n                </div>) : (\r\n                <div>\r\n                    <input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus={true}\r\n                           value={newStatus} placeholder=\"Enter your status\"/>\r\n                </div>)}\r\n        </b>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","// extracted by mini-css-extract-plugin\nexport default {\"bio\":\"ProfileDataForm_bio__K63t3\",\"formGroup\":\"ProfileDataForm_formGroup__rOOgA\",\"skills\":\"ProfileDataForm_skills__98HWe\",\"saveButton\":\"ProfileDataForm_saveButton__yeVjy\",\"userName\":\"ProfileDataForm_userName__TcCx1\",\"contact\":\"ProfileDataForm_contact__oV5gU\",\"header\":\"ProfileDataForm_header__iyenu\",\"error\":\"ProfileDataForm_error__0AYfa\",\"userContacts\":\"ProfileDataForm_userContacts__PBlbS\"};","import React, {FC, useState} from \"react\";\r\nimport classes from \"./ProfileDataForm.module.css\";\r\nimport {FormControl} from \"../../common/FormsControls/FormsControls\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {IProfileDataFormProps, IProfileFormData} from \"../../../types/types\";\r\n\r\nconst ProfileDataForm: FC<IProfileDataFormProps> = ({profile, onSubmit, setEditMode, errorMessage}) => {\r\n    const [expanded, setExpanded] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: {errors, touchedFields},\r\n    } = useForm<IProfileFormData>({\r\n        defaultValues: {\r\n            fullName: profile.fullName,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            aboutMe: profile.aboutMe,\r\n            contacts: profile.contacts || {},\r\n        },\r\n    });\r\n\r\n    const handleHeaderClick = () => {\r\n        setExpanded(!expanded);\r\n        if (expanded) {\r\n            setEditMode(false); // Устанавливаем editMode в false при сворачивании формы\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit((data) => onSubmit(data, setError))}>\r\n            <div\r\n                className={classes.bio}>\r\n                <div className={classes.header} onClick={handleHeaderClick}>\r\n                    Main user info\r\n                    <span>▲</span>\r\n                </div>\r\n                {expanded && ( // Показываем содержимое формы, только если expanded === true\r\n                    <>\r\n                        <div className={classes.formGroup}>\r\n                            <b className={classes.userName}>Name: </b>\r\n                            <FormControl Component=\"input\" name=\"fullName\" register={register} errors={errors}\r\n                                         touchedFields={touchedFields}/>\r\n                        </div>\r\n                        <div className={classes.formGroup}>\r\n                            <b>Looking for a job: </b>\r\n                            <input type=\"checkbox\" {...register(\"lookingForAJob\")} />\r\n                        </div>\r\n                        <div className={classes.formGroup}>\r\n                            <b>My professional skills: </b>\r\n                            <div className={classes.skills}>\r\n                                <FormControl Component=\"textarea\" name=\"lookingForAJobDescription\" register={register}\r\n                                             errors={errors} touchedFields={touchedFields}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className={classes.formGroup}>\r\n                            <b>About me: </b>\r\n                            <FormControl Component=\"textarea\" name=\"aboutMe\" register={register} errors={errors}\r\n                                         touchedFields={touchedFields}/>\r\n                        </div>\r\n                        <div className={classes.formGroup}>\r\n                        <div className={classes.userContacts}>\r\n                            <b>Contacts: </b>\r\n                            {Object.keys(profile.contacts).map((key) => {\r\n                                return (\r\n                                    <div key={key} className={classes.contact}>\r\n                                        <b>{key}:</b>\r\n                                        <FormControl Component=\"input\" name={`contacts.${key}`} register={register}\r\n                                                     errors={errors} touchedFields={touchedFields}/>\r\n                                        {typeof errorMessage === 'string' ?\r\n                                        (key.includes(errorMessage.split(/[-()>]/)[3].toLowerCase())) &&\r\n                                            <span className={classes.error}>{errorMessage}</span> : \"\"\r\n                                        }\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <button type=\"submit\" className={classes.saveButton}>Save info</button>\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ProfileDataForm","import React, {ChangeEvent, MouseEvent, useState} from 'react';\r\nimport {beachImg} from \"../../../App\";\r\nimport classes from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../assets/images/user.png\"\r\nimport ProfileStatusWithHooks from \"../ProfileStatus/ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {FC} from \"react\";\r\nimport {\r\n    IContactProps,\r\n    IProfile,\r\n    IProfileDataProps,\r\n    IProfileFormData,\r\n    IProfileInfoProps\r\n} from \"../../../types/types\";\r\n\r\nexport const Contact: FC<IContactProps> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={classes.contact}>\r\n            <b>{contactTitle}:</b> <span>{contactValue}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData: FC<IProfileDataProps> = ({profile, isOwner, activateEditMode, expanded, setExpanded}) => {\r\n    return (\r\n        <div>\r\n            <div\r\n                className={`${classes.bio} ${expanded ? classes.expanded : ''}`}\r\n                onClick={() => setExpanded(!expanded)}\r\n            >\r\n                Main user info\r\n                <span className={classes.toggleArrow}>{expanded ? \"▲\" : \"▼\"}</span>\r\n                <div>\r\n                    <b>Name: </b> {profile.fullName}\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job: </b> {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n                </div>\r\n                <div>\r\n                    <b>My professional skills: </b> <div className={classes.skills}>\r\n                    {profile.lookingForAJobDescription || `not filled`} </div>\r\n                </div>\r\n                <div>\r\n                    <b>About me: </b> {profile.aboutMe}\r\n                </div>\r\n                <div>\r\n                    <b>Contacts: </b> {Object.keys(profile.contacts).map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n                })\r\n                }\r\n                </div>\r\n                {isOwner && <div>\r\n                    <button onClick={activateEditMode} className={classes.editButton}>Edit info</button>\r\n                </div>}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst handleServerError = (error: any, setError?: any, setErrorMessage?: (message: string | null) => void) => {\r\n    if (error.errors && setError) {\r\n        // Структурированные ошибки из API\r\n        error.errors.forEach(({ field, message }: { field: string; message: string }) => {\r\n            setError(field, { type: \"server\", message });\r\n        });\r\n    } else if (error.message && setError) {\r\n        // Парсим общую ошибку вида \"Invalid url format (Contacts -> facebook)\"\r\n        const match = error.message.match(/Invalid url format \\(Contacts -> (\\w+)\\)/);\r\n        if (match) {\r\n            const fieldName = match[1].toLowerCase();\r\n            setError(`contacts.${fieldName}`, {\r\n                type: \"server\",\r\n                message: \"Invalid URL format\",\r\n            });\r\n        } else {\r\n            // Общая ошибка\r\n            setErrorMessage?.(error.message);\r\n        }\r\n    } else if (typeof error === 'string') {\r\n        // Просто текст ошибки\r\n        setErrorMessage?.(error);\r\n    } else {\r\n        // Неизвестная ошибка\r\n        setErrorMessage?.('An error occurred while saving profile');\r\n    }\r\n};\r\n\r\nconst ProfileInfo: FC<IProfileInfoProps> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [expanded, setExpanded] = useState<boolean>(false);\r\n    const [errorMessage, setErrorMessage] = useState<string | null>(null)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>;\r\n    }\r\n\r\n    const activateEditMode = (e: MouseEvent) => {\r\n        setEditMode(true)\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const onSubmit = async (formData: IProfileFormData, setError?: any) => {\r\n        try {\r\n            const profileInfo: IProfile = {\r\n                ...profile,           // берем существующий профиль\r\n                ...formData,          // добавляем данные из формы\r\n                userId: profile.userId, // сохраняем обязательные поля\r\n                photos: profile.photos\r\n            };\r\n\r\n            const result = await saveProfile(profileInfo)\r\n\r\n            if (result && result.error) {\r\n                // Обрабатываем ошибку из результата\r\n                handleServerError(result.error, setError, setErrorMessage);\r\n            } else {\r\n                // Успешное сохранение\r\n                setEditMode(false);\r\n                setExpanded(true);\r\n                setErrorMessage(null);\r\n            }\r\n\r\n        } catch (error) {\r\n            if (error.errors && setError) {\r\n                // Структурированные ошибки\r\n                error.errors.forEach(({ field, message }) => {\r\n                    setError(field, { type: \"server\", message });\r\n                });\r\n            } else if (error.message && setError) {\r\n                // Парсим общую ошибку вида \"Invalid url format (Contacts -> facebook)\"\r\n                const match = error.message.match(/Invalid url format \\(Contacts -> (\\w+)\\)/);\r\n                if (match) {\r\n                    const fieldName = match[1].toLowerCase();\r\n                    setError(`contacts.${fieldName}`, {\r\n                        type: \"server\",\r\n                        message: \"Invalid URL format\",\r\n                    });\r\n                } else {\r\n                    // Если ошибка не связана с конкретным полем, можно оставить общее сообщение\r\n                    setErrorMessage(error.message);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files.length) {\r\n            const file = e.target.files[0]\r\n            savePhoto(file)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <img className={classes.coverImg} src={beachImg} alt=\"logo\"/>\r\n            </div>\r\n            <div className={classes.descriptionBlock}>\r\n                {profile && profile.photos ? (\r\n                    <div className={classes.userDescription}>\r\n                        <img src={profile.photos.large || userPhoto} alt=\"\"/>\r\n                        {isOwner ? <input type=\"file\" onChange={onMainPhotoSelected}/> : \"\"}\r\n\r\n                        {editMode ? <ProfileDataForm profile={profile}\r\n                                                     onSubmit={onSubmit}\r\n                                                     setExpanded={setExpanded}\r\n                                                     setEditMode={setEditMode}\r\n                                                     errorMessage={errorMessage}\r\n                            /> :\r\n                            <ProfileData activateEditMode={activateEditMode} profile={profile} isOwner={isOwner}\r\n                                         expanded={expanded} // Передаём expanded\r\n                                         setExpanded={setExpanded} // Передаём setExpanded\r\n                            />}\r\n                    </div>\r\n\r\n                ) : (\r\n                    <Preloader/>\r\n                )}\r\n                <div className={classes.profileStatus}>\r\n                    Status <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ProfileInfo","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MyPosts_item__b+cMR\",\"textBlock\":\"MyPosts_textBlock__tw8so\",\"posts\":\"MyPosts_posts__MmXOc\",\"error\":\"MyPosts_error__MmKQq\",\"errorMessage\":\"MyPosts_errorMessage__o-J6N\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Post_content__rPvB-\",\"item\":\"Post_item__gR0QO\"};","import React from 'react';\r\nimport classes from \"./Post.module.css\";\r\nimport {FC} from \"react\";\r\nimport {IPostProps} from \"../../../types/types\";\r\n\r\nconst Post: FC<IPostProps> = ({image, message, likes}) => {\r\n    return (\r\n\r\n            <div className={classes.item}>\r\n                <div className={classes.content}>\r\n                    <img  src={image} alt=\"\" />\r\n                    <span> { message } </span>\r\n                    <div>\r\n                    <span> Like { likes } </span>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React, {FC} from 'react';\r\nimport classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post\";\r\nimport {avatar} from \"../../../App\";\r\nimport {MyPostsStock} from \"../../common/FormsControls/FormsControls\";\r\nimport {IMyPostsProps, IMyPostsStockProps} from \"../../../types/types\";\r\n\r\n\r\nconst MyPostsForm: FC<IMyPostsStockProps> = (props) => {\r\n\r\n    return (\r\n        <MyPostsStock onAddPost={props.onAddPost} />\r\n    )\r\n}\r\n\r\nconst MyPosts: FC<IMyPostsProps> = (props) => {\r\n    const postsData =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map((e, index) => <Post key={index} image={avatar} message={e.message} likes={e.likesCount}/>)\r\n\r\n    const onAddPost = (text: string) => {\r\n        props.updateNewPostText(text); // Обновляем текст\r\n        props.addPost(text); // Отправляем пост\r\n    };\r\n\r\n    return (\r\n        <div className={classes.item}>\r\n            <h3>My posts</h3>\r\n            <MyPostsForm onAddPost={onAddPost}/>\r\n            <div className={classes.posts}>{postsData}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst MyPostsMemoized = React.memo(MyPosts)\r\n\r\nexport default MyPostsMemoized;","import {addPostActionCreator, updateNewPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {IActions, IMyPostsContainerDispatch, IMyPostsContainerProps} from \"../../../types/types\";\r\nimport {RootState} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nconst mapStateToProps = (state: RootState): IMyPostsContainerProps => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText,\r\n        users: state.usersPage.users,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch<IActions>): IMyPostsContainerDispatch => {\r\n    return {\r\n        updateNewPostText: (text) => {\r\n            let action = updateNewPostActionCreator(text)\r\n            dispatch(action)\r\n        },\r\n        addPost: (text) => {\r\n            dispatch(addPostActionCreator(text))\r\n        },\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React, {FC} from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {IProfilePageProps} from \"../../types/types\";\r\n\r\n\r\n\r\nconst ProfilePage: FC<IProfilePageProps> = ({profile, isOwner, status, updateStatus, savePhoto, saveProfile,}) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile}\r\n                         isOwner={isOwner}\r\n                         status={status}\r\n                         updateStatus={updateStatus}\r\n                         savePhoto={savePhoto}\r\n                         saveProfile={saveProfile}\r\n            />\r\n            <MyPostsContainer  />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfilePage","import React from 'react';\r\nimport ProfilePage from \"./ProfilePage\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {useNavigate, useParams, useLocation} from 'react-router-dom';\r\nimport withAuthRedirect from \"../../hoc/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {IProfilePageContainerMapStateProps, IWithRouterProps} from \"../../types/types\";\r\nimport {RootState} from \"../../redux/redux-store\";\r\n\r\nfunction withRouter(Component: React.ComponentType<any>) {\r\n    return (props: any) => {\r\n        const navigate = useNavigate();\r\n        const params = useParams();\r\n        const location = useLocation();\r\n\r\n        return (\r\n            <Component\r\n                {...props}\r\n                navigate={navigate}\r\n                params={params}\r\n                location={location}\r\n            />\r\n        );\r\n    };\r\n}\r\n\r\n\r\n\r\nclass ProfilePageContainer extends React.Component<ProfilePageContainerProps> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.params.userId || this.props.authorizedUserId\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ProfilePageContainerProps, prevState: {}, snapshot?: any) {\r\n        let userId = this.props.params.userId || this.props.authorizedUserId\r\n        if (userId !== (prevProps.params.userId || prevProps.authorizedUserId)) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <ProfilePage {...this.props}\r\n                         isOwner={!this.props.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         savePhoto={this.props.savePhoto}\r\n                         saveProfile={this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootState): IProfilePageContainerMapStateProps => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuthorized: state.auth.isAuthorized,\r\n})\r\n\r\nconst connector = connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile})\r\n\r\ntype ProfilePageContainerProps = IWithRouterProps & ConnectedProps<typeof connector>\r\n\r\nexport default compose(\r\n    connector,\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfilePageContainer)\r\n"],"names":["_ref","status","updateStatus","editMode","setEditMode","useState","newStatus","setNewStatus","useEffect","_jsx","children","onChange","e","currentTarget","value","onBlur","deactivateEditMode","autoFocus","placeholder","onDoubleClick","activateEditMode","profile","onSubmit","errorMessage","expanded","setExpanded","error","setError","register","handleSubmit","formState","errors","touchedFields","useForm","defaultValues","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","data","_jsxs","className","classes","onClick","handleHeaderClick","_Fragment","FormControl","Component","name","type","Object","keys","map","key","includes","split","toLowerCase","Contact","contactTitle","contactValue","ProfileData","_ref2","isOwner","_ref4","savePhoto","saveProfile","setErrorMessage","Preloader","src","beachImg","alt","photos","large","userPhoto","target","files","length","file","ProfileDataForm","async","formData","profileInfo","userId","result","handleServerError","forEach","_ref3","field","message","match","fieldName","_ref5","stopPropagation","ProfileStatusWithHooks","image","likes","MyPostsForm","props","MyPostsStock","onAddPost","MyPosts","postsData","posts","reverse","index","Post","avatar","likesCount","text","updateNewPostText","addPost","React","connect","state","profilePage","newPostText","users","usersPage","dispatch","action","updateNewPostActionCreator","addPostActionCreator","ProfileInfo","MyPostsContainer","ProfilePageContainer","refreshProfile","this","params","authorizedUserId","getUserProfile","getStatus","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","render","ProfilePage","connector","auth","isAuthorized","compose","navigate","useNavigate","useParams","location","useLocation","withAuthRedirect"],"sourceRoot":""}